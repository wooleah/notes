============= Typescript basic types =============
- number
- string
- boolean: there's no truthy or falsy values
- object
- Array
- Function
- undefined
*REMEMBER ts only helps us before we compile ts -> js(in development)

JavaScript Numbers are Always 64-bit Floating Point
JavaScript numbers are always stored as double precision floating point numbers, following the international IEEE 754 standard.
-> And so it typescript

Type inference
- if you initialize it with a type, then typescript fixes that variable's type
you can write 
let number1: number = 5 <- not a good practice(it doesn't rely on type inference anymore)
instead write
let number1 = 5; or let number1:number;

in the same way I can write
const person: {
  name: string;
  age: number;
} = {
  name: 'Woojae',
  age: 30
}
but since you're initializing it, just write
const person = {
  name: 'Woojae',
  age: 30
}

practice(nested object)
const product = {
  id: 'abc1',
  price: 12.99,
  tags: ['great-offer', 'hot-and-new'],
  details: {
    title: 'Red Carpet',
    description: 'A great carpet - almost brand-new!'
  }
}
Write type object
{
  id: string;
  price: number;
  tags: string[] or Array<string>
  details: {
    title: string;
    description: string;
  }
}

*if you want to use mixed type of array, use 'any' type(be careful), or 'union' type

============= Typescript additional types =============

1. Tuple: fixed length array
- you can set the type for each item
- have to explicitly write types (role: [number, string] -> length of 2, each item's type set)
*We can still push to tuples and typescript won't catch it - it's an exception
Why use this? -> it's basically a more strict array

2. Enum: number but has human readable identifier
enum Permission {
  ADMIN = 1,
  AUTHOR,
  EDITOR,
  READER
};
- you can adjust the starting value(default to zero)
- you can also set values for each one of them

3. Any: remove typescript support
- don't use it

4. Union: for supporting multiple types
input1: number | string 
- '+' operator for both number/string works, but ts doesn't know that, so it'll complain
-> check with typeof (ex: typeof input1 === 'number' && ...etc) -> add flexibility to your type checking
let food: string | number | boolean = true;

5. Literal: for specific inputs
convertingOption: 'as-number' | 'as-text'

6. Custom type(type alias): make your own type
- usually with union type, or union + literal
- you can use it with nested object as well
type adminName = 'Woojae' | 'Aleah' 
type User = {name: string; age: number};

7. unknown(more restrictive than any)
- it'll at least check the type
you can check typeof unknown type variable to do some logic

============= Typescript function types =============
*if ts can infer the type, let it do it's job
*for optional parameter: use '?:'

1. void: doesn't return anything
function printResult(): void
*if you want to set the return type of function undefined, you should return nothing, check below examples

function printResult(num: number): void {
  console.log(`result: ${num}`);
}

function printResult(num: number): undefined {
  console.log(`result: ${num}`);
  return;
}

2. function as types***
- we can specify parameter and return type of the function as well
let combineValues: Function
let combineValues: (a: number, b: number) => number;

3. callbacks
function addAndHandle(n1: number, n2: number, cb: (num: number) => void)
- you can still return values from callback function. It simply tells you that value returned by callback function will not be used

4. this
- this has to come first in parameters
https://www.typescriptlang.org/docs/handbook/functions.html
function f(this: void) -> this is unusable

- callback this can be specified like below(this on callback is going to be undefined anyway)
- meaans that onclick should not have this
interface UIElement {
    addClickListener(onclick: (this: void, e: Event) => void): void;
}

- specifying who should call this(this must be called on the instance of Handler)
class Handler {
    info: string;
    onClickBad(this: Handler, e: Event) {
        // oops, used `this` here. using this callback would crash at runtime
        this.info = e.message;
    }
}
let h = new Handler();
uiElement.addClickListener(h.onClickBad); // error!
function(this: Deck) -> this is Deck object

5. never(never returns, never reaches the end of the code)
- good for error throwing functions or infinitely running function
function generateError(message: string, code: number) {
  throw {
    message,
    errorCode: code
  };
}
generateError('An error occurred', 500);
- inferred type is void(it's a new feature)

