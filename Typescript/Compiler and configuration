============= Compile on save =============
tsc app.ts --watch

============= compile the entire project(multiple project) =============
tsc --init
tsc -w

============= Decide which files to compile or not =============
add options to tsconfig.json
a. "exclude": []
- you can add wildcard like "*.dev.ts" or "**/*.dev.ts" (any dev file in any folder will be excluded)
- "node_modules" is added by default(if you don't add exclude option, but if you did add exclude option, you should add node_modules)
b. "include": []
- excluded folders will still be excluded
- only the ones you included will be compiled
c. "files": []
- only files, not directories

4. Change how is it compiled 
- change "compilerOptions"
a. "target": "ES6"
- might be better because ts will do less work and our js code will be more concise
b. "lib": []
- we're writing nodejs program but tsc knows about document and windows. How?
- by default all features included in your target language is included in tsc(if you un-comment lib then you'll get an error regarding basic js feature)
https://www.typescriptlang.org/docs/handbook/compiler-options.html
https://www.typescriptlang.org/docs/handbook/tsconfig-json.html
c. allowJs, checkJs
- use them if you don't want to write ts, but want to use some of its features
d. "sourceMap"
- allow us to read ts code
- we can debug our ts in the browser
e. outDir(output) and rootDir(input)
- /src might have all the ts files and /dist might have all the js files
- outDir changes compiled file output directory(also copies subdir)
- rootDir reads the ts files in the dir you've given + keeps the folder structure in dist folder
f. removeComments
- YES
g. noEmit
- you don't wanna create js files, just wanna check type errors in ts files
h. downlevelIteration
- in older js loops can go crazy -> turn it on if you're using loops and your code is not working properly
i. noEmitOnError
- don't compile when there's an error
- other files won't compile as well if one file has an error

============= Strict compilation =============
- enable strict: true to set all of them to true

a. noImplicitAny
- don't allow any implicit type on parameters
- but variables are ok (like let logged; and assign it later)
,because typescript can track the variables

b. strictNullChecks
- prevents values to be used if they can potentially be null or undefined
- mainly for preventing runtime error
- use ?. on possibly null variables or write ! at the end of the variable assign(const button = something!) to notify tsc that you 100% know that exists

c. strictFunctionTypes
- if set to true you have to always define what functions will return

d. strictBindCallApply
- checks if you're using it right

e. strictPropertyInitialization
- property must be initialized with types

f. noImplicitThis
- this cannot be any by implicit

g. alwaysStrict
- js file always has 'use strict'

============= Code quality =============
a. Additional checks
noUnusedLocals, noUnusedParameters, noImplicitReturns, noFallthroughCasesInSwitch
gives us warnings regarding the code quality

b. Module Resolution Options
- too advanced and not really used right now

c. Source Map Options
- same as above(default is fine)

d. Experimental Options
- enable experimental js features

============= Debugging =============
1. enable sourcemap to true
2. place your breakpoints
3. f5 to debug in chrome (server needs to be running)
*js.map files(sourcemap) are bridges between ts-js files


============= Refs =============
https://www.typescriptlang.org/docs/handbook/tsconfig-json.html
https://www.typescriptlang.org/docs/handbook/compiler-options.html
https://code.visualstudio.com/docs/typescript/typescript-debugging