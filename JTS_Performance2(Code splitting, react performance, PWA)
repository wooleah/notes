How to optimize code & Code splitting
Progressive web app(looks like mobile app & works offline)

Once downloaded, one of the JS's heaviest cost is parse and compile(JS engine does this work)
- So basically parse/ompile/execution of JS takes time(quite a bit of time)

Angular did Ahead of Time compilation(comiple the JS code and ship that instead of browser JIT comilation)
-> significantly reduced JS parse/compile time, but there's pros and cons to it

Before shipping the product, test it in WebPageTest like websites to see if it can run normally in other devices
- we want to reduce 1. time to meaningful paint, 2. time to interactive

JS can benefit from code splittin(progressive bootstraping)
- start with the minimum code for current page, then later lazy load or unlock different pages
VENDOR files are loaded in the beginning(react, react dom and third party libraries)

With create-react-app, if we put the import on the top of our code, webpack detects code splitting
- webpack knows that it's dynamic import and it'll only import it when that piece of code is requested

One way of code splitting:
render() {
  return <this.state.component />
}
-> save Components in state after importing it when route changes, then this weird syntax will work
*in onRouteChange
if (rouet === 'page3') {
  import ('./components/Page3').then(Page3 => this.setState({route: route, component: Page3.default}))
  // because Page3 is default exported
}

You can make AsyncComponent component that returns class component
- takes importComponent as an argument, and awaits for that and save it in the state
- then render it (return this.state.component ? <Component {this.props} /> : null

Code splitting can induce flashing(you have to decide to adopt this or not)

-> Instead of AsyncComponent you can use react hook(lazy and suspense)?? ** check

Different types of code splitting
1. Route based(most of the time you use this)
- react router
2. Component based(code split on a component level)
- react loadable

-> This approach is too cumbersome -> use React.lazy or loadable components

--------------

How to improve React performance

1. How to see the performance
- in local development -> ?react_perf
- by doing this, chrome dev tool gets what component was doing in performance tab(in cpu - timing)
- [update] -> this is the lifecycle
- because passing props(when it changes) cause re-render, have to be careful not to make giangantic passing chain
2. use react dev tool (chrome extension)
- changes from green to red when renders a lot

How to avoid unnecessary re-renders
1. use lifeCycles like shouldComponentUpdate (for class based components)
*in vuejs it's automatically tracked
- remember that setState is async
this.setState(state => {
      return { count: state.count + 1 };
    });
- don't overuse it since it could hinder performance

2. you can use React.memo(ized) for stateless components
3. you can use PureComponent for class based components to only re-render when prop changes
- caveat is that this does shallow comparison(it might miss some prop changes if you use deeply nested objects)
- writing your own shouldComponentUpdate has more control
4. You can use why did you update library

Tree shaking(done by webpack automatically)
- removed unused code(if you use large library but only use one function from it, it discards the rest)
    
