Think like a senior developer - think about the problem and find effecient solution that saves time
-> We will focus on the big tickets that covers 90% of the website loading speed

Just a little random note
*Html file indicates what we need from the server(like an instruction)

What we will learn
A. Frontend
1. Critical render path <-
2. Optimized code
3. Progressive web app

B. communication between front-back(Transfer)
1. Minimizing files <-
2. Minimizing deliveries

C. Backend
1. CDNs
2. Caching
3. Load Balancing
4. DB Scaling
5. GZIP


Network performance(2 main)
1. Honey I shrunk the files
- minimize text and images, so we have less data to transfer over wire
- minimizing text -> people used to do this manually but now it's part of the build process(more on webpack videos)
- minimizing images -> described below
2. The traveling deliveryman




Image file formats
1. jpeg: complex images with many colors(phtorograph), don't really allow transparency, usually big in size
2. gif: color is limited to 2~256, good for small sized animations
3. png: like jpg but limits colors, used for simple logos, also can add transparency
4. svg: very different from others(vector graphics), you can expand them and they'll be still clear, really good for retina and 4k display. Also can be customized with css. But usually very simple.

png vs jpg
png uses lossless compression algorithm and jpg uses lossy one, but on the web pngs are generally smaller because they are used for non-complex images.

New types
There are new image types that are superior to those 4 formats above. But browser support is not there yet.

What you can do with these knowledge
- select the right image format and compress them as much as possible

1. Minimizing images
- transparency -> png
- animations -> gif
- colorful images -> jpg
- simple icons, logos, illustrations(that can scale) -> svg
- reduce png with TinyPNG
- reduce JPG with JPEG-optimizer
- choose simple illustrations over highly detailed photograph
- always lower JPEG image quality(30-60%)
- resize image based on size it will be displayed

- diplay different sized images for different backgrounds
- use cdns like imgix
- remove image metadata

About resizing images
- @media screen(css will be showed it in screen where it's viewed on), also can be @media print(shows in print screen mode)
-> Might have to make different image sizes for different media queries

Image metadata?
- verexif.com
- pictures taken on cameras contain a lot of information(remove this for performance and security reasons)

Delivery optimizations(traveling deliveryman)
- you also have to reduce download frequency(not just download size), reducing the number of components a page requires proprtionally reduces the number of http request it has to make.
- think twice before adding a big script library(or css) to your website
- reducing the number of files is called bundling, and there are already tools to do that for us


Critical render path
Now let's think about WHAT HAPPENS to files when it arrives at the browser -> How do we optimize this step?
- THAT WHOLE PROCESS IS CALLED THE CRITICAL RENDER PATH
What happens first:
1. HTML: when html arrives browser reads(parses) it into vocabularies it understands and creates tree model of html element(DOM), and while building that when it sees external resources it starts downloading all of those(CSS, JS are higher priorities, images lower).
- we want to load the CSS as soon as possible, and JS as late as possible 
2. CSS: generate tree model CSS OM(CSS object model) - has styling information attached to the tree nodes
-> when browser sees javascript tag it grabs it from the server -> js file is read by the browser -> execute changes js file wants
-> browser combines DOM, CSS OM and creates a render tree -> browser uses this tree to figure out the layout -> construct the layout
-> paint -> DONE
* for images as soon as browser sees an image tag, it starts downloading(not part of render tree building process)


