Fp is also about separation of concerns but also separates data and funcs.
- Fp langs focus on simplicity. And they don't have classes and methods 

Fp also wants to achieve same goal as oop. and it all comes down to one concept. "Pure functions"
- Separation between the data and behavior of the program 
- All object created in fp is immutable 
- We don't want shared state and we adhere to the functions 

What is the purpose of fp?

Some rules 
- Function has to return same output for same input 
- Function cannot modify anything outside of itself(no side effects) 

Problem of shared state is that anything can interact with it. And order of those interactions matter 

Console log is affecting the outside world browser because it's logging something to the browser 

 

Referential transparency 
If I change a function call to a constant would it change the result 
For same input it should always produce same output 
This principles outcome in easy to test and easy to compose functions. Also it avoids a lot of bugs. Because there's no shared states and mutations 

Can you have 100% pure function? (No side effects and same input produce same output no matter how many times you call it) 
- Communicating with outside world with input and output is not pure 
- You gotta have side effects when writing programs(nature of programming)
-> basically the goal of fp is not making functions pure. It's goal is to minimize side effects 
-> side effect and impurity are not bad. Your goal is to organize your code in a way so your code is more predictable and easier to debug 

How do we make a perfect function? 
1. Func should do one task only 
2. Every func should should return something 
3. And it should be pure 
4. And it shouldn't modify global state 
5. It should be composable 
-> Fp is all about making your code predictable 


Indempotence 
: function that always does what we expect it to do.(it doesn't have to be pure and it's ok to communicate with the outside world) 
Example) deleting a user function is always going to return no more user  
Example) when we send API get request we expect same result for whatever parameters we passed to 

- This concept(being able to return same output for the same input always) is valuable when it comes to parallel and distributed computing. 
- Another characteristic of indempotence is that you can call yourself inside of you and still get the same result(math.abs) 


Imperative vs declarative 
Imperative tells computer what to do and how to do something 
Declarative code tells computer what to do and what should happen. It doesn't tell computer how to do things. 
Computers are imperative and we are more declarative 
Example) you tell your friend can you pass me that water instead of saying go there grab it and come back here and put it on my hand. 


Machine code is imperative 
- For loop is imperative. Foreach is more declarative 
- jQuery is more imperative. Tells browser exactly what to do and how to do it. And react is more declarative. We tell component this is data and display this. 
-> fp helps us be more declarative. We tell our computer what to do instead of how to do things
However remember that declarative code always get compiled or transpiled and will be run by something more imperative 


Immutability 
Don't change state instead return a copy of changed state 
But this seems like it would waste memory 
-> structural sharing (lots of fp code implementat this, we don't actually copy everything, we only copy changed state and rest stays in memory) 


HOF and closures(review)
1. HOF
- Functions are first class citizens 
- HOF does one of two things: takes function as argument or returns func.
2. Closures
- it's a mechanism for containing some state, returning a function in another function and inner function makes reference to a state in the outer function. We can save that inner function somewhere and later through that function we can access outer function state.
-> as long as we don't modify that state, we're following the fp paradigm and not making function(outer) impure. We can just use closure to ensure our data privacy(we can't modify outer function state with returned inner func)
-> that's why closures are used in fp


Currying and partial application
Q. What is a curried function?
A. It's a function that takes multiple arguments one at a time
ex) const add = a => b => a + b

Q. Then why is it useful?
A. You can return a function(partial application of itself) by giving one argument to the curried function. Then that argument will be saved in closure and you can use that parameter in newly saved function.
ex) const addToTwo = add(2);

Q. What is a partial application?
A. It's a function which has been applied to some but not yet all of its arguments. Basically it's a function which has some arguments fixed inside its closure scope.

Q. What's the difference?
A. Partial applications can take as many or as few arguments a time as desired. But curried functions always return a unary function(function which takes one argument)


*idea of fp is to minimize the mutation - it can do 1 to 1 data transformation really well
- making many pure functions to make predictable code

=================================
// Amazon shopping
const user = {
  name: 'Kim',
  active: true,
  cart: [],
  purchases: []
}

let amazonHistory = []
// first receive all the functions, then arguments
const compose = (f,g) => (...args) => f(g(...args))
const pipe = (f,g) => (...args) => g(f(...args))

// purchaseItem(user, {name: 'laptop', price: 344})
purchaseItem(
  addItemToCart,
  applyTaxToItems,
  buyItem,
  emptyCart
)(user, {name: 'laptop', price: 200})

// function purchaseItem(user, item) {
//   return {...user, purchases: item}
//   // return Object.assign({}, user, {purchases: item});
// }
function purchaseItem(...fns) {
  // reduce takes cb(acc, currentVal)
  // so by compose we're making a chain of functions in acc
  return fns.reduce(pipe)
}

function addItemToCart(user, item) {
  amazonHistory.push(user)
  const updatedCart = user.cart.concat(item)
  // make new object and put both user and cart in there
  return Object.assign({}, user, {cart: updatedCart})
}

function applyTaxToItems(user) {
  amazonHistory.push(user)
  const {cart} = user;
  const taxRate = 1.3;
  const updatedCart = cart.map(item => {
    return {
      name: item.name,
      price: item.price * taxRate
    }
  })
  return {...user, cart: updatedCart}
}

function buyItem(user) {
  amazonHistory.push(user)
  return {...user, purchases: user.cart}
}

function emptyCart(user) {
  amazonHistory.push(user)
  return Object.assign({}, user, {cart: []});
}

amazonHistory

//Implement a cart feature:
// 1. Add items to cart.
// 2. Add 3% tax to item in cart
// 3. Buy item: cart --> purchases
// 4. Empty cart

// function refundItem() {

// }

//Bonus:
// accept refunds.
// Track user history.
=================================



Referential Transparency


Composition vs inheritance
1. Inheritance is superclass that has extended to smaller pieces.
ex) class Character <- class Elf extends Character, class Ogre extends Character
2. Composition is to make smaller pieces to create something bigger
ex) amazon cart above

A lot of people prefer composition over inheritance, but there are drawbacks for both paradigm

First let's talk about what they are
Inheritance: what it is
Composition: what it has

Inheritance: we have character class and they have attack method, and now we need to add sleep method
1. Tight coupling problem : parent-child is very tight coupling, small change affect all children subclasses
2. Fragile base class problem: because of tight coupling, changes to the base class can break subclasses
3. Heirarchy
- gorilla-banana problem: you asked for a banana but you got a gorilla holding a banana with the entire jungle, all I wanted was a sleep method, but I got methods and properties from User, Charcter and Elf

User
  watcher
  character
    elf
      junior elf(should only be able to sleep, but it has all the methods we don't need) -> gorilla-banana problem
    ogre
-> we're predicting the future at the time we're building something

Using composition(what it has)
function getAttack(character) {
 return Object.assign({}, character, {attack: () {}})
}

function Elf(name, weapon, type) {
 // makes basic elf
 let elf = {
  name,
  weapon,
  type
 }
 // adds new elf object with new functionality
 return getAttack(elf)
}

Elf = attack() + sleep()
Ogre = attack() + makeFort() + sleep()

Another example)
Inheritance
Robot
 .drive()
 CleaningRobot
  .clean()
 MurderRobot
  .kill()
  MurderRobotDog - bark and it's robot but doesn't poop -> now have to make a superclass for Animal + robot?
   .bark()
Animal
 .poop()
 Dog
  .bark()
 Cat
  .meow()

Composition to the rescue
dog = pooper + barker
cat = pooper + meower
cleaningRobot = driver + cleaner
murderRobot = driver + killer
murderRobotDog = driver + killer + barker

const barker = state => ({
 bark: () => console.log('Woof I am ' + state.name)
})
const driver = state => ({
 drive: () => state.position = state.position + state.speed
})
const murderRobotDog = name => {
 let state = {
  name,
  speed: 100,
  position: 0
 }
 
 return Object.assign({}, barker(state), driver(state), killer(state))
}
https://www.youtube.com/watch?v=wfMtDGfHWpA


OOP and FP are programming paradigm
- writing code compliant with a specific set of rules
FP
- code is combination of functions and data is immutable
- many operations on fixed data
- stateless(we don't modify state)
- pure functions: functions we write don't impact the code that's running outside of that function (no side effects)
- declarative(what we want it to be doing)
- works really well for high performance(can run on multiple processors)
- few things running a lot
- data + behaviors(different things so need to be kept separately)

OOP
- few operations on common data
- stateful(we modify state)
- we have this and self(allow more side effects)
- imperative(how we want it to be done)
- if you have many things(characters in a game) with few operations
- data + behaviors in an object
