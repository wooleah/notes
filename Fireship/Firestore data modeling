*Firebase index the fields on a  document automatically which means you can sort, query, filter them

Some unusual data types
1. geopoint (lat, long)
2. reference: ref to another doc in db(useful when model is deeply nested)
--- especially useful for relational data modeling ---
3. map(hashmap): you can embed this on a doc
- in sql you would usually normalize this data by making an address table(for example) then associate it with user data with primary, foreign key pair
-> we can denormalize this data by embedding it in a user doc itself
(and firestore will also index the fields on this map as well)
4. array: unique set of values in order
- use it to embed raw data on the doc or normalize data and join it with different query

================ Main techniques ================
1. Embedding: adding data directly to a doc(put everything in one doc) instead of normalizing them to their own collection
- most performant(you just need to read one doc) and cost effective(only if dataset is small enough to fit in 1MB)
- you can't query any embedded data, you need to read the entire document
2. Root collection: instead of shoving everything in one doc you make many collections and reference that id in other doc
- for example post and tags have many to many relationship(you can use this technique here)
- has flexibility when querying across multiple properties
3. Subcollection: You can nest the data
- one to many relationship is setup implicitly(we don't need to setup a tag array like root collection)
- You can't query across the same property
4. Bucketing(not the official name)
- with embedded data we have one doc read -> we might not need some of the data
- with collection we might need to read multiple docs for a small amount of data
-> combine these two: make a collection with only those data embedded
- make tags collection but document id is the user(or post) id (ids match) -> one doc to show the user data, and other to show tags
example) if you have one post with 50 tags, then you can just read 2 docs

================ Reading ================
General rule of thumb: Concise and readable query code -> effective data model
Access pattern to reference data:

get(): return data as a promise
onSnapshot(): realtime stream of the data

1. single doc read: 
db.collection('users').doc('id')

2. subcollection read: 
db.collection('users').doc('id').collection('tokens')

3. Bucket read: 
db.collection('posts').doc('id')
db.collection('tokens').doc('id')
- concurrent read, read two docs with the same ids

4. multiple read:
const post = await db.collection('posts').doc('postId').get();
const tagIds = post.data().tags;
const tagReads = tagIds.map(tag => db.collection('tags').doc(tag).get())
const tags = await Promise.all(tagReads)

// Reads an array of IDs from a collection concurrently
const readIds = async(collection, ids) => {
  const reads = ids.map(id => collection.doc(id).get());
  const result = await Promise.all(reads);
  return result.map(v => v.data);
}

- firebase sdk under the hood does "pipe lining", so if you make multiple requests at the same time it will combine all those request and run them concurrently

================ Querying ================
1. orderBy
db.collection('posts').orderBy('date', 'desc') -> default is asc
- orderBy can be a filter as well
- remember that you can chain methods like orderBy().limit()
2. Paginate
startAfter(lastWeek) - exclusive(not including lastWeek)
- you can do startAt to be inclusive
endBefore, endAt(lastWeek)
3. Where
db.collection('posts').where('field', 'operator', 'value to compare to')
: where('date', '==', today)
- chain where()s to use AND
- There's no not equals operator(!=) -> do this by making two queriers where of (> and <) amd combine theme
- array-contains

- make simple query

================ Indexes ================
* In order to query something efficiently at scale it need to have an index
- by default firestore indexes all your document properties

If you want to create index for multiple properties(points >= 8 && nickname == 'Woojae')
- for example, you want to query docs that have more than 10 points(you can manually index that)
-> create composite index on firestore console or write code on your client-side app -> you get error msg saying create index
-> click -> it makes index
* this firebase sdk asking you to make index is a better approach


================ Security ================
* Remember that if you read a document, you have to read the entire document
That's why you want to model your user data in separate collection because someone can scrape it and spam your users

most secure /accounts collection
match /accounts/{id} {
  allow read, write: if false;
}

only that specific user can access /users collection
match /users/{id} {
  allow read, write: if id == request.auth.uid;
}

public data /profiles
match /profiles/{id} {
  allow read;
  allow write: if id == request.auth.uid;
}




