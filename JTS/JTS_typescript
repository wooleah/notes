Typescript is the superset of js(ts file is compiled to js)

Type checking
const sum = (a:number, b:number) => {
  return a+b;
}

Configuration
tsc --init -> configure tsconfig.json

Watch
tsc filename.ts --watch

Types
// boolean
let isCool: boolean = true;
// number
let age: number = 56;
// string
let eyeColor: string = 'brown';
// Array
let pets: string[] = ['cat', 'dog']
let pets2: Array<string> = ['cat', 'dog']
// Object
let wizard: object = {
  a: 'John'
}
// null and undefined
let meh: undefined = undefined;
let noo: null = null;
// Tuple
let basket: [string, number];
basket = ['basketball', 5];
- order matters here

reference
- https://github.com/Microsoft/TypeScript-Vue-Starter#typescript-vue-starter

- You can do type assertion like dart with x as string -> can use string methods
- Be careful with using any(no point of using typescript)
- never shows no error when there's no reachable endpoint
- interface and classes are used a lot in react
- you can make properties private in typescript(default to public)
- you can set more than one type with Union type like below
let food: string | number | boolean = true;

// inferred type
let x = 4; -> tsc thinks we did let x: number = 4;
x = 'test';

Declaration files: files that allows you to descript the shape the code that is written in it
- adding types for tsc to understand 3rd party lib(allows us to use types for react and vue and etc..)
- DefinitelyTyped -> community based(because libraries don't usually come with declaration files)


React typescript
- in stless component, make interface with nameStlessProps and assign it to const componentName: React.SFC<nameStlessProps>

- Consider types for stless components
type Props = {
  children?: JSX.Element
}
? means that it might not have children

interface ISearchBoxProps {
  searchChange(event: React.SyntheticEvent<HTMLInputElement>): Function
}
- event that is coming from an input element