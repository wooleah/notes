Problem: Service got larger and managing all the servers and dbs are getting more and more difficult
Solution: make other people do it(+ take responsibilities)

AWS
- cloud infra as a service(rent)
- choose solutions you need and only pay for those
- on prem datacenter(server on your own machine) is becoming less common because of security and reliability, scaling

What can they provide?
- load balancers
- scaling when user grows
- push notification, badges
- and tons more

Competitors(They offer different services)
- Microsoft(Azure)
- Google(Google cloud platform)
- IBM(Open whisk)

*This is the field of DevOps and most likely web devs won't work on this(because there are people dedicated to this field)
- but it's important to know how this works with web dev stack

Some of their services
EC2(bare metal machine): compute whatever you want(think of it as a basic server you can run)
S3(Object storage service): each object is stored as a file with it's metadata and id(key)
- we can upload, store, download pretty much any file
- size limit of 5gb
Lambda: run code for any type of app and backend service, you just provide a function and conditions
- zero config, setup
- automatic scaling
CloudFront: Web server that speeds up distribution of our static files(CDN)
- we put html, js, css on cloudfront and amazon sends this to datacenters(like CDN)
- make our app very fast(because amazon has server everywhere)
- automatic https
DynamoDB: Fast nosql db, automatic scaling, key-value storage model
- good performace and reliability
- used for web, mobile, gaming, IoT, ...etc

Google aws flow: show what people use to make their architecture, how their logic flows through their app
- you can check this as well

Example architecture
1. CloudFront to serve static files worldwide
2. EC2 to handle REST api
3. user info in DynamoDB(profiles)
4. when user submit image -> EC2 -> Lambda function store that to S3 bucket

It's important to understand infra as a senior dev(No need to deep dive into DevOps field but just knowing how thing connect are important)

Monolithic vs Micro-services
Because now it's easier to manage apps with AWS and Docker and so on, idea of building smaller inter-connected services are popular
- isn't monolithic better cause it's simple? Might be, depends on the company
- smaller chunks are better for testing and developing, and publishing
- one module works really well(pure functions)
- It's going to become more and more popular because of it's efficiency

Problem with having own server
- Have to pay when no one's accessing the service
-> Serverless app (we hand them code to run)
store the function in db and run it when there's a request
-> cold start problem(have to grab it from db and starting it takes time)


Use a tool Serverless to not worry about configuration
npm i -g serverless
sls create -t aws-nodejs
-> change configuration in serverless.yaml

Now add IAM user and change service name(in serverless.yaml) to that username
then add credential to sls with below command
sls config credentials --provider aws --key <KEY> --secret <SECRET>
then sls deploy
- serverless zips all our files, saves it to s3 bucket
then you can invoke it with sls invoke --function <name>
*you can also invoke it locally(simulate it) with sls invoke local --function <name>

API gateway(aws service)
- if you add http event in serverless.yml it uses API gateway




