JS has v8 engine - has two parts(Memory Heap, Call Stack)
1. Memory Heap - memory is allocated here
 - Memory Leak: there's a limited amount of memory, so if you make too many vars(that we don't use), then there will be unused memory all around the place -> That's why global var is bad!
2. Call Stack - where code is read & executed(LIFO)

Questions
1. JS is a single threaded language that can be non-blocking?
 - single threaded -> one call stack only(only can do one thing at a time)
  -> pros: can avoid complicated scenarios that can happen in multi-threaded languages(deadlocks)
 - What if one item in call stack is a massive task?(takes really long time) -> then on a website user won't be able to do anything(other tasks are blocked from performing) -> ASYNC to the rescue! -> wrap that massive task in setTimeout and make it async
 -> In order to not block the thread, a task can be transformed to async
2. Stack overflow is when call stack gets too big and there's no more space in call stack


---

JS Run-Time Environment
On top of the engine, they have Web APIs(DOM-document, AJAX-XMLHttpRequest, Timeout-setTimeout), Callback Queue, and Event Loop

ex)
1) console.log(1);
2) setTimeout(() => console.log(2), 2000);
3) console.log(3);
-> 1 and 3 runs first, and after 2s when timer is done, Web API will give you a notice and say there's a callback, and callback of setTimeout will be added to the Callback Queue
-> Event Loop constantly checks if the Call stack is empty, and if it's empty then it checks the Callback Queue. It sees callback from setTimeout and moves it to the Call Stack
