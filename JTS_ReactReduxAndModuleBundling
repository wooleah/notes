Remember that React, Vue, Angular are just tools

jQuery was very imperative, tells the browser exactly what and how to do stuff -> creates lots of inconsistencies
- constantly keeping track of what changed and what to change is a huge mess(hard to scale and manage)

React does one thing(View) really really good
- manages to make our website(DOM) change in predictable ways that is easy to scale and easy to manage.

Think in component point of view
- it works on its own

React has one-way dataflow(data only flows from top -> bottom)
- less bug-prone code
React has virtual DOM(js object that describes the website)
- we want less DOM manipulation because browser has to work really hard


Use npx to create-react-app(guranteed updated version of reactjs)

serviceWorker in index.js is automatically unregistered, it's used to make PWA


React is the core library(view, dom manipulation)
and ReactDOM is the glue
- seperation of concerns in React components are that each components are only concerned about themselves

Components are just js code snippets and reactjs allows us to write JSX and use react functionalities.


Refactoring
- components: functional components(pure component)
- containers: class components(that has lifecycle hooks, smart components)

package.json (npm update)
- in dependencies if you put '^' in front of the dependencies, it means to upgrade as much as possible(not major version upgrade)
- you can also add > or <
