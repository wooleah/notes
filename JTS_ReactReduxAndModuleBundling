Remember that React, Vue, Angular are just tools

jQuery was very imperative, tells the browser exactly what and how to do stuff -> creates lots of inconsistencies
- constantly keeping track of what changed and what to change is a huge mess(hard to scale and manage)

React does one thing(View) really really good
- manages to make our website(DOM) change in predictable ways that is easy to scale and easy to manage.

Think in component point of view
- it works on its own

React has one-way dataflow(data only flows from top -> bottom)
- less bug-prone code
React has virtual DOM(js object that describes the website)
- we want less DOM manipulation because browser has to work really hard


Use npx to create-react-app(guranteed updated version of reactjs)

serviceWorker in index.js is automatically unregistered, it's used to make PWA


React is the core library(view, dom manipulation)
and ReactDOM is the glue
- seperation of concerns in React components are that each components are only concerned about themselves

Components are just js code snippets and reactjs allows us to write JSX and use react functionalities.


Refactoring
- components: functional components(pure component)
- containers: class components(that has lifecycle hooks, smart components)

package.json (npm update)
- in dependencies if you put '^' in front of the dependencies, it means to upgrade as much as possible(not major version upgrade)
- you can also add > or <

Error boundaries
- You should use a Error Boundary every time if you want to inform the user about something he/she did wrong or the server did wrong
- Don't use it everywhere because it'll take more resources

Access props in the constructor()
-> 
class ErrorBoundary extends Component {
  constructor(props) {
    super(props)
  }
}

componentDidCatch lifecycle hook
- runs when there's an error in that component

How can redux improve a react app
** AS A SENIOR DEV we have to think about pros and cons
- redux follow 3 principles
1. single source of truth
2. state is read-only
3. changes using pure functions

all the actions go through one reducer(pure function) and that changes the state, and react gets notified with that change

Flux pattern(redux uses this pattern)
Action -> Dispatcher -> Store -> View
- before this we used MVC pattern Action -> controller -> Model(many of them) -> View(many of them)

Only containers(smart components) are going to know about redux store, not functional components
(react-redux connects react and redux)

Actions are just objects, and it changes state in related reducer
- later we'll have many different reducers, and we have to gather them into one rootReducer and pass that to createStore in index.js
(use combineReducers from 'redux' -> combineReducers({searchRobots, requestRobots});)
- You need {createStore} from redux, {Provider, connect} from react-redux
- After creating the store, pass it to Provider(wrapping the App components) via props
- Provider component is going to pass store down the component tree
- dispatch sends actions to reducer

Wrap export with connect()(App)
- connect() is a HOF which returns another function

Middleware
- you can add middlewares like follow: action -> middleware -> reducer with {applyMiddleware} from 'redux'
- createStore(rootReducer, applyMiddleware(middleware()))

Async
- redux-thunk: checks if any actions return function instead of an object(redux doesn't understand when action returns a function)
-> by adding this we're now listening to actions, and when func gets returned by an action, redux-thunk passes dispatch func to it. So it can call some actions


